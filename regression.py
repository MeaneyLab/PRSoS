import csv
import string
from sys import *
import matplotlib
from blaze.expr.expressions import label
matplotlib.use('Agg')
from plottings import *
import statsmodels.formula.api as smf

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from PRSoS import *
import argparse
from DRSFiltering import *
    
    
    

def getPRSscore(PRS_file):
    prs_dict={}

    with open(PRS_file, 'r') as f:
        fileReader = f.readlines()
        header = fileReader[0].split(',')
        n_line = len(fileReader)
        len_line = len(header)
        splited_file = []
        for l in fileReader:
            splited_file.append(l.split(','))
        labels = []
        for l in range(n_line):
            labels.append(splited_file[l][0])
        print labels
        for i in range(2,len_line,2):
            pvalue = float(header[i].split('_')[1])
            #snp_count = [int(splited_file[1][i-1])]
            snp_count = []
            
            prs = []
            for l in range(1,n_line):
                prs.append(float(splited_file[l][i]))
                snp_count.append(float(splited_file[l][i-1]))
            prs_dict[pvalue] = [snp_count,prs]
    return prs_dict, [labels]
        #print fileReader[1]
        
        
        
        
        
        
if __name__=='__main__':
    import logging
    
    parser = argparse.ArgumentParser(description='PRS Script Parameters', version='1.7')
    #parser.add_argument("Output", action="store", help="The path and name stem for the output files. One name will be used for the score output, the snp log and the regression output. This is similar to the --out flag in pLink")

    parser.add_argument("--pheno_file", action="store", default=None, dest="pheno_file", help="Sepcify the path to the data file for the phenotype. It is assumed that the phenotype data is organized in the same order as the samples in the genoytpe file.")

    parser.add_argument("--pheno_columns", action="store", default=[0], type=int, nargs="+", dest="pheno_columns", help="Specify which columns that the phenotype data is in the provided phenotype data file. Multiple column numbers can be specified to conduct regression with multiple phenotypes. Default is the first column.")

    parser.add_argument("--pheno_delim", action="store", default=",", dest="pheno_delim", help="Specify the delimiter for the phenotype data file. Default is comma")

    parser.add_argument("--pheno_no_header", action="store_true", default=False, dest="pheno_no_header",  help="Sepcify whether the phenotype has a header row")
    parser.add_argument("--log_pvalue", action="store_true", default=False, dest="log_pvalue",  help="Sepcify whether to log the p values")

    parser.add_argument("--covar_columns", action="store", default=[], type=int, nargs="+", dest="covar_columns", help="Specify which columns that the phenotype data is in the provided phenotype data file. Multiple column numbers can be specified to conduct regression with multiple phenotypes. Default is the first column.")
    parser.add_argument("--prs_score_file", action="store", default=None, dest="prs_file", help="Sepcify the path to the data file for the prs score. This file should be the one generated by PRSoS.py.")
    parser.add_argument("Output", action="store", help="The path and name stem for the output files. One name will be used for the score output, the snp log and the regression output. This is similar to the --out flag in pLink")
    parser.add_argument("--DRSfilter", action="store_true", default=False, dest="drs",  help="Sepcify whether to do DRSfiltering")
    parser.add_argument("--gwas_path", action="store", default=None, dest="gwas_path", help="Sepcify the path to the data file for the gwas.")
    parser.add_argument("--snplog_path", action="store", default=None, dest="snplog_path", help="Sepcify the path to the data file for the snplog generated by PRSoS.")
    
   
    results=parser.parse_args()
    
    prs_score = results.prs_file
    pheno_file=results.pheno_file
    pheno_columns=results.pheno_columns
    pheno_delim=results.pheno_delim
    pheno_no_header=results.pheno_no_header
    covar_columns=results.covar_columns
    outputPath=results.Output
    log_pvalue = results.log_pvalue
    drs = results.drs
    gwas_path = results.gwas_path
    snplog_path = results.snplog_path
    
    if drs and (gwas_path is None or snplog_path is None):
        raise Exception("you have to offer the path to the gwas and the snplog if you want to do the DRSfiltering") 
    
    #logger
    
    logger = logging.getLogger("regression_log")
    logger.setLevel(logging.DEBUG)
    # create file handler which logs even debug messages
    fh = logging.FileHandler(outputPath+".log")
    fh.setLevel(logging.DEBUG)
    # create console handler with a higher log level
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)
    # create formatter and add it to the handlers
    formatter1 = logging.Formatter('%(asctime)s %(levelname)s : %(message)s')
    formatter2 = logging.Formatter('%(asctime)s %(levelname)s : %(message)s')

    ch.setFormatter(formatter1)
    fh.setFormatter(formatter2)
    # add the handlers to the logger
    logger.addHandler(fh)
    logger.addHandler(ch)
    #--------------------------
    
    
    prs_dict,labels = getPRSscore(prs_score)
    phenotypes, thresholds, r2All, pAll=regression(prs_dict,pheno_file, pheno_delim, pheno_columns, pheno_no_header, covarColumns=covar_columns, outputName=outputPath,logger = logger)
    pvaluelist=sorted(list(prs_dict.keys()))
    step= pvaluelist[1]-pvaluelist[0]
    
    high_correlated = r_square_plots(phenotypes,r2All,pAll, thresholds, outputName=outputPath, width = 3,bar_width = step)
    
    #print high_correlated.keys()
    phenos = list(high_correlated.keys())
    for out_pheno in phenos:
        output_dict = {}
        for p in high_correlated[out_pheno]:
            
            output_dict[p] = prs_dict[p]
        
        output=writePRS(output_dict,  outputPath+'_'+out_pheno, logger=logger,samplenames=list(labels))
    
    if log_pvalue:
        for x in range(len(phenotypes)):
        #for pheno in phenotypes:
            with open(outputPath+'_'+phenotypes[x]+'_Pvalue.csv', 'w') as f:
                spamwriter = csv.writer(f)
                spamwriter.writerow(['threshold','coefficient significance','R square'])
                #n_pheno = len(phenotypes)
                #for x in range(n_pheno):
                l = len(pAll[x])
                for i in range(l):
                    spamwriter.writerow([thresholds[i],pAll[x][i],r2All[x][i]])
                
    
    if drs:
        
        
        g_header,gwas = get_gwas(gwas_path)
        snplog = get_snplog(snplog_path,pvaluelist)
        for x in range(len(phenotypes)):

            filtered_gwas = DRSFiltering(r2All[x],snplog,gwas)
            with open(outputPath+'_'+phenotypes[x]+'_drsgwas.csv', 'w') as f:
                spamwriter = csv.writer(f)
                spamwriter.writerow(g_header)
                for k,v in filtered_gwas.iteritems():
                    l = [k]+v
                    spamwriter.writerow(l)
                
            
        
        
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
